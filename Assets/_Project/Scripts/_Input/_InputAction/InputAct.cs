//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/_Project/Scripts/_Input/_InputAction/InputAct.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Assets._Project.Scripts._Input._InputAction
{
    public partial class @InputAct : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputAct()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputAct"",
    ""maps"": [
        {
            ""name"": ""Player_"",
            ""id"": ""dc4da865-385d-4cdb-bc7f-364fb07a0d35"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""d1924791-16e9-4cab-b6a2-875cad8b85ef"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""f30abbad-ce78-438f-9586-7123ad2151e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""f939454d-a628-4e50-b895-754b3ab24148"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""7cf90808-2f74-4f2b-a621-f382f3a523da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DuckDown"",
                    ""type"": ""Button"",
                    ""id"": ""6a56f1d5-ded5-42bc-9586-91feb613e62e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""44dbaf0a-9353-4f71-ab32-bd62e46f1160"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""289c7779-3ddd-48ca-b349-1c893943b3e5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouser&Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9a8ce33e-8ea0-400f-9516-d0df44c4295d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouser&Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0c28153a-c6d2-49de-b302-674dd26f4dd5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouser&Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""aaba9057-415e-44f4-8b48-a3ceeda59f26"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouser&Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arraow"",
                    ""id"": ""eb2fad26-1c20-4838-afeb-db3e242eeef1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""de73870a-fe1b-4b31-8c83-79d017ca4ecc"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouser&Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""bffa2c10-2afd-4e6f-b3c5-eb9f00d95b04"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouser&Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d82ccb9c-5934-4562-a21d-5e888784f8a7"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouser&Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""68d02b7d-35d1-4877-9b69-52203506cdd8"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouser&Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""LeftStick"",
                    ""id"": ""5e893632-1728-4206-ba4f-ada11b18c131"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""996abd73-7745-4d62-b4c8-da43e77c53dc"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""61ec24e4-7487-40d2-9d2e-7d2988da64a5"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d6d88321-3099-4ac6-b403-f43e10f33484"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""618c9b98-8063-4f88-997f-ef678c7fabc6"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""DPad"",
                    ""id"": ""c06534da-49f3-40ba-a4ed-8df9d5b56b0c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0bc394da-49dc-43c5-8cb9-332a13809a27"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cbe2f9a5-25cd-44f0-9200-63421e1c50b8"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7bc2fc56-7714-4acd-9caf-ed2b94af021b"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""be9c1362-b2c6-45c6-9c11-cee47916c7ac"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""061b02a3-ab96-4b64-8ef6-6c5afc85a7cd"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouser&Keyboard"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57661374-6e40-4ac1-aac3-589a1ee71864"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""228596d8-523c-4e38-a064-bc2853c32980"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouser&Keyboard"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f80b58e9-b6db-44b2-b3f2-c14726e0e700"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""454f9a76-6236-4079-b335-809a50657020"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouser&Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ac172be-3e86-4764-9a5a-bccf6f0f6d2d"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""453200cc-473f-435e-bd14-4a6f6299bc1a"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouser&Keyboard"",
                    ""action"": ""DuckDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f945aa2-3b6f-442e-a831-4fecae2538ca"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""DuckDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera_"",
            ""id"": ""f1716c95-8f8c-4b3c-9c77-0c3145c6f622"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""0c255877-6898-438b-b691-8feec0b0c64d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""96aa7da8-1a51-4921-9bfc-2cd7fba7e3ca"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouser&Keyboard"",
            ""bindingGroup"": ""Mouser&Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Player_
            m_Player_ = asset.FindActionMap("Player_", throwIfNotFound: true);
            m_Player__Move = m_Player_.FindAction("Move", throwIfNotFound: true);
            m_Player__Shoot = m_Player_.FindAction("Shoot", throwIfNotFound: true);
            m_Player__Aim = m_Player_.FindAction("Aim", throwIfNotFound: true);
            m_Player__Jump = m_Player_.FindAction("Jump", throwIfNotFound: true);
            m_Player__DuckDown = m_Player_.FindAction("DuckDown", throwIfNotFound: true);
            // Camera_
            m_Camera_ = asset.FindActionMap("Camera_", throwIfNotFound: true);
            m_Camera__Newaction = m_Camera_.FindAction("New action", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player_
        private readonly InputActionMap m_Player_;
        private IPlayer_Actions m_Player_ActionsCallbackInterface;
        private readonly InputAction m_Player__Move;
        private readonly InputAction m_Player__Shoot;
        private readonly InputAction m_Player__Aim;
        private readonly InputAction m_Player__Jump;
        private readonly InputAction m_Player__DuckDown;
        public struct Player_Actions
        {
            private @InputAct m_Wrapper;
            public Player_Actions(@InputAct wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Player__Move;
            public InputAction @Shoot => m_Wrapper.m_Player__Shoot;
            public InputAction @Aim => m_Wrapper.m_Player__Aim;
            public InputAction @Jump => m_Wrapper.m_Player__Jump;
            public InputAction @DuckDown => m_Wrapper.m_Player__DuckDown;
            public InputActionMap Get() { return m_Wrapper.m_Player_; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(Player_Actions set) { return set.Get(); }
            public void SetCallbacks(IPlayer_Actions instance)
            {
                if (m_Wrapper.m_Player_ActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_Player_ActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_Player_ActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_Player_ActionsCallbackInterface.OnMove;
                    @Shoot.started -= m_Wrapper.m_Player_ActionsCallbackInterface.OnShoot;
                    @Shoot.performed -= m_Wrapper.m_Player_ActionsCallbackInterface.OnShoot;
                    @Shoot.canceled -= m_Wrapper.m_Player_ActionsCallbackInterface.OnShoot;
                    @Aim.started -= m_Wrapper.m_Player_ActionsCallbackInterface.OnAim;
                    @Aim.performed -= m_Wrapper.m_Player_ActionsCallbackInterface.OnAim;
                    @Aim.canceled -= m_Wrapper.m_Player_ActionsCallbackInterface.OnAim;
                    @Jump.started -= m_Wrapper.m_Player_ActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_Player_ActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_Player_ActionsCallbackInterface.OnJump;
                    @DuckDown.started -= m_Wrapper.m_Player_ActionsCallbackInterface.OnDuckDown;
                    @DuckDown.performed -= m_Wrapper.m_Player_ActionsCallbackInterface.OnDuckDown;
                    @DuckDown.canceled -= m_Wrapper.m_Player_ActionsCallbackInterface.OnDuckDown;
                }
                m_Wrapper.m_Player_ActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @Shoot.started += instance.OnShoot;
                    @Shoot.performed += instance.OnShoot;
                    @Shoot.canceled += instance.OnShoot;
                    @Aim.started += instance.OnAim;
                    @Aim.performed += instance.OnAim;
                    @Aim.canceled += instance.OnAim;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @DuckDown.started += instance.OnDuckDown;
                    @DuckDown.performed += instance.OnDuckDown;
                    @DuckDown.canceled += instance.OnDuckDown;
                }
            }
        }
        public Player_Actions @Player_ => new Player_Actions(this);

        // Camera_
        private readonly InputActionMap m_Camera_;
        private ICamera_Actions m_Camera_ActionsCallbackInterface;
        private readonly InputAction m_Camera__Newaction;
        public struct Camera_Actions
        {
            private @InputAct m_Wrapper;
            public Camera_Actions(@InputAct wrapper) { m_Wrapper = wrapper; }
            public InputAction @Newaction => m_Wrapper.m_Camera__Newaction;
            public InputActionMap Get() { return m_Wrapper.m_Camera_; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(Camera_Actions set) { return set.Get(); }
            public void SetCallbacks(ICamera_Actions instance)
            {
                if (m_Wrapper.m_Camera_ActionsCallbackInterface != null)
                {
                    @Newaction.started -= m_Wrapper.m_Camera_ActionsCallbackInterface.OnNewaction;
                    @Newaction.performed -= m_Wrapper.m_Camera_ActionsCallbackInterface.OnNewaction;
                    @Newaction.canceled -= m_Wrapper.m_Camera_ActionsCallbackInterface.OnNewaction;
                }
                m_Wrapper.m_Camera_ActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Newaction.started += instance.OnNewaction;
                    @Newaction.performed += instance.OnNewaction;
                    @Newaction.canceled += instance.OnNewaction;
                }
            }
        }
        public Camera_Actions @Camera_ => new Camera_Actions(this);
        private int m_MouserKeyboardSchemeIndex = -1;
        public InputControlScheme MouserKeyboardScheme
        {
            get
            {
                if (m_MouserKeyboardSchemeIndex == -1) m_MouserKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouser&Keyboard");
                return asset.controlSchemes[m_MouserKeyboardSchemeIndex];
            }
        }
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        public interface IPlayer_Actions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnShoot(InputAction.CallbackContext context);
            void OnAim(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnDuckDown(InputAction.CallbackContext context);
        }
        public interface ICamera_Actions
        {
            void OnNewaction(InputAction.CallbackContext context);
        }
    }
}
