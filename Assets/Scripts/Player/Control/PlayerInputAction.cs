//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""FPS"",
            ""id"": ""29d36bda-9ec9-4b19-9ed3-76d550c24e13"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8e970089-09d1-4367-b7cd-76af54c4b70a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""3f8c168f-dea8-4313-b071-2f26e52953f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""cc0caa0d-c2e8-47d6-af35-eb7777051982"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""1bab8e27-b757-4874-8e01-8f3ee06d71a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FastAttack"",
                    ""type"": ""Button"",
                    ""id"": ""15c99c42-fcca-476c-a50a-0a8d290129d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AssistanControll"",
                    ""type"": ""Button"",
                    ""id"": ""569d16d8-cce2-4aa1-ba38-48e24cae216d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseWheel"",
                    ""type"": ""Button"",
                    ""id"": ""625bf36d-2de3-46ac-9638-4fd94268cff0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""f72854ad-12a9-4fb5-972d-f392a08af08e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2e5376bf-1dd7-4f34-bffb-3e772f130c62"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c0d23557-6348-4438-af5c-206a4fd97971"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c37c2db6-66bf-4ca5-9393-546cecdfe884"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""dec5d456-9a7f-4df7-bf40-343808cec4d1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6c908317-2cc4-4b32-9d54-e5d7a67b390e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07545486-5d17-4764-bf51-8426ad4325ac"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43b53a95-ea31-4714-833a-5dc1d102b273"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold(duration=0.2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f332494-9d71-413e-8b5e-4c61931c6bbb"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AssistanControll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ba61efb-d2df-46e2-a785-8ae88108a030"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FastAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9caeafb-89ae-4afb-9864-455fb898b9b6"",
                    ""path"": ""<Mouse>/forwardButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b8ac116-3b95-45a5-a8e2-11178f8e240c"",
                    ""path"": ""<Mouse>/backButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FPS
        m_FPS = asset.FindActionMap("FPS", throwIfNotFound: true);
        m_FPS_Movement = m_FPS.FindAction("Movement", throwIfNotFound: true);
        m_FPS_Jump = m_FPS.FindAction("Jump", throwIfNotFound: true);
        m_FPS_Look = m_FPS.FindAction("Look", throwIfNotFound: true);
        m_FPS_Aim = m_FPS.FindAction("Aim", throwIfNotFound: true);
        m_FPS_FastAttack = m_FPS.FindAction("FastAttack", throwIfNotFound: true);
        m_FPS_AssistanControll = m_FPS.FindAction("AssistanControll", throwIfNotFound: true);
        m_FPS_MouseWheel = m_FPS.FindAction("MouseWheel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FPS
    private readonly InputActionMap m_FPS;
    private IFPSActions m_FPSActionsCallbackInterface;
    private readonly InputAction m_FPS_Movement;
    private readonly InputAction m_FPS_Jump;
    private readonly InputAction m_FPS_Look;
    private readonly InputAction m_FPS_Aim;
    private readonly InputAction m_FPS_FastAttack;
    private readonly InputAction m_FPS_AssistanControll;
    private readonly InputAction m_FPS_MouseWheel;
    public struct FPSActions
    {
        private @PlayerInputAction m_Wrapper;
        public FPSActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_FPS_Movement;
        public InputAction @Jump => m_Wrapper.m_FPS_Jump;
        public InputAction @Look => m_Wrapper.m_FPS_Look;
        public InputAction @Aim => m_Wrapper.m_FPS_Aim;
        public InputAction @FastAttack => m_Wrapper.m_FPS_FastAttack;
        public InputAction @AssistanControll => m_Wrapper.m_FPS_AssistanControll;
        public InputAction @MouseWheel => m_Wrapper.m_FPS_MouseWheel;
        public InputActionMap Get() { return m_Wrapper.m_FPS; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FPSActions set) { return set.Get(); }
        public void SetCallbacks(IFPSActions instance)
        {
            if (m_Wrapper.m_FPSActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_FPSActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_FPSActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_FPSActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_FPSActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_FPSActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_FPSActionsCallbackInterface.OnJump;
                @Look.started -= m_Wrapper.m_FPSActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_FPSActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_FPSActionsCallbackInterface.OnLook;
                @Aim.started -= m_Wrapper.m_FPSActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_FPSActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_FPSActionsCallbackInterface.OnAim;
                @FastAttack.started -= m_Wrapper.m_FPSActionsCallbackInterface.OnFastAttack;
                @FastAttack.performed -= m_Wrapper.m_FPSActionsCallbackInterface.OnFastAttack;
                @FastAttack.canceled -= m_Wrapper.m_FPSActionsCallbackInterface.OnFastAttack;
                @AssistanControll.started -= m_Wrapper.m_FPSActionsCallbackInterface.OnAssistanControll;
                @AssistanControll.performed -= m_Wrapper.m_FPSActionsCallbackInterface.OnAssistanControll;
                @AssistanControll.canceled -= m_Wrapper.m_FPSActionsCallbackInterface.OnAssistanControll;
                @MouseWheel.started -= m_Wrapper.m_FPSActionsCallbackInterface.OnMouseWheel;
                @MouseWheel.performed -= m_Wrapper.m_FPSActionsCallbackInterface.OnMouseWheel;
                @MouseWheel.canceled -= m_Wrapper.m_FPSActionsCallbackInterface.OnMouseWheel;
            }
            m_Wrapper.m_FPSActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @FastAttack.started += instance.OnFastAttack;
                @FastAttack.performed += instance.OnFastAttack;
                @FastAttack.canceled += instance.OnFastAttack;
                @AssistanControll.started += instance.OnAssistanControll;
                @AssistanControll.performed += instance.OnAssistanControll;
                @AssistanControll.canceled += instance.OnAssistanControll;
                @MouseWheel.started += instance.OnMouseWheel;
                @MouseWheel.performed += instance.OnMouseWheel;
                @MouseWheel.canceled += instance.OnMouseWheel;
            }
        }
    }
    public FPSActions @FPS => new FPSActions(this);
    public interface IFPSActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnFastAttack(InputAction.CallbackContext context);
        void OnAssistanControll(InputAction.CallbackContext context);
        void OnMouseWheel(InputAction.CallbackContext context);
    }
}
